/*
 Navicat Premium Data Transfer

 Source Server         : 192.168.31.10
 Source Server Type    : MySQL
 Source Server Version : 50725
 Source Host           : 192.168.31.10:3306
 Source Schema         : videoblog-article

 Target Server Type    : MySQL
 Target Server Version : 50725
 File Encoding         : 65001

 Date: 12/10/2020 20:00:13
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `article_id` bigint(20) NOT NULL DEFAULT 0,
  `title` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `create_time` datetime(0) NULL DEFAULT NULL,
  `article_type` int(255) NOT NULL COMMENT '1-普通文章 2-精品文章',
  PRIMARY KEY (`article_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (1648, 'Win10系统安装Docker', '<div class=\"cl-artical\">\r\n            <h2>文稿</h2> \r\n<p>在Docker环境下，它对于win10对于大多数的Linux系统都有良好的支持，作为Docker，我们来重新回顾一下。Docker的logo是一条鲸鱼，是典型的容器化技术代表。 <img src=\"http://cdn.itlaoqi.com/attachment/20200406/18a6b5ce57284d7cbe3e5ca9ca00b489.jpg\" alt=\"\"></p> \r\n<p>它的特点主要有几个</p> \r\n<ol> \r\n <li>第一它是开源的应用容器引擎基于go语言开发。</li> \r\n <li>第二，因为上一节课我们讲过什么是容器化技术，所以容器化技术是完全使用沙箱的机制，而且部署的开销极低，也就是指在当前我们自己的操作系统中就可以部署多个容器应用了。</li> \r\n <li>第三个目前容器化技术并不是只有Docker这一个产品，但是Docker是目前使用范围最广的，所以可以说Docker就是容器化技术的代名词。docker除了标准的容器化技术以外，还具备了一定虚拟化的智能,利用docker可以向我们本地物理机申请对应的资源，这样方便我们程序的迁移与拓展。</li> \r\n</ol> \r\n<p>以上Docker的一些简单介绍，那么作为Docker来说，它最主要的目的就是提供了标准化的应用打包，也就是指Docker它集装箱是一个镜像文件 <img src=\"http://cdn.itlaoqi.com/attachment/20200406/19e38255f7094aafb3afaf2fe3df3661.jpg\" alt=\"\"> 在这个镜像文件中包含了对应的比如我们的外部应用，甚至数据库队列等等这些软件的东西，还可以利用Docker的虚拟化部分的职能来将应用中的一些硬件的需求也打包进去。 比如我们需要多大的硬盘，比如我们需要多少cpu以及内存，都是可以在Docker内进行调整的。当镜像被运维的工程师拿到以后，他只要对镜像进行展开还原运行，就可以对之前的完整的环境进行还原。 <img src=\"http://cdn.itlaoqi.com/attachment/20200406/517ab2e625e44c6db84848af4f04aad4.jpg\" alt=\"\"> 作为Docker来说，它的发展历史其实还是很年轻的。来咱们了解一下，首先作为Docker他并不是空穴来风，早在2004年的时候，基于service早期的系统，它就提供了类似于容器化的支持。到2008年的时候，Linux container的容器化技术也日趋成熟，并且技术的代名词叫LXC在2013年的时候，这个Docker是基于lxc Linux的容器化技术进行了扩展封装，并且实现了开源，自此Docker就与我们见面了。到了2016年docker有了重大的版本变更，从原先的一个版本拆分成了CE和EE版本，所谓CE就是社区版本，EE版本就是企业版本，社区版本是免费的，企业版本是收费的！</p> \r\n<p>现在有这么多的机构组织和项目都在使用Docker，可以说无论你是开发人员还是运维人员，如果不会Docker，那就太out了，下面我们就进入Docker的官网来了解一下。 （翻页） 打开浏览器，在地址栏中输入Docker的官网 www.docker.com <img src=\"http://cdn.itlaoqi.com/attachment/20200406/d5c50d6eb98d4ae0bde5b2974592fef9.jpg\" alt=\"\"> 在这个Docker的官方文档中对Docker进行了详细的讲解和说明，如果你的英文功底够好，不用买任何书，就可以直接从这里边得到完整的材料了。 在这个页面中，我们关注点放在最下边，作为Docker，它对于多种操作系统都是有良好的支持。如果是我们PC机个人电脑的话，它支持MacOS以及windows10这两个平台，如果是服务器的环境，他对于绝大多数的Linux系统都有着良好的支持。同时作为x86架构以及主流的AMR64架构，它也都有着良好的支持。如果我们是要在服务器上安装Docker的话，我建议的操作系统是ubuntu以及centos。那么作为我们个人电脑来说，我们把注意力放在如何在windows10这个操作系统上安装我们Docker的桌面版，现在点击这个作为Docker对windows是有着相对严格的要求，我们来看一下它的具体要求。</p> \r\n<ol> \r\n <li>要求必须是windows10 64位的版本号必须是专业版企业版或者是教育版，同时它的build的编号必须在15063之后。</li> \r\n <li>就是需要在BIOS中开启我们PC机的虚拟化服务，这样才能进行cpu的虚拟化。在我了解的很多主板上，这个选项是没有默认开启的，你需要查询一下相关的手册，如果你之前运行过VMware的话，并且能够成功运行其他虚拟机，那么这个选项一定是打开的。</li> \r\n <li>第三要开启CPU的SLAT特性。</li> \r\n <li>第四就是操作系统至少要分配4Gb的内存。</li> \r\n</ol> \r\n<p>可以看到在win10这个环境下，对我们Docker的要求还是蛮高的。不过好在现在我们的笔记本基本上都默认符合这些要求。 如何完成Docker的下载？在这里我们需要点击download from docker hub <img src=\"http://cdn.itlaoqi.com/attachment/20200406/81ef59f7d96f40c4a281226505433286.jpg\" alt=\"\"> 这个网站是Docker的镜像仓库站我们需要从网站上进行下载。在这儿特别需要说明的是，我们Docker hub因为是在国外部署的，在很多大概率情况下，这个网站我们无法从国内直接访问，所以如果你打不开这个网址，可以从咱们课程资料中直接获取Docker的安装版。</p> \r\n<p>如果你能访问的话，不妨可以按我的操作流程。在这儿直接点击右侧的please login to download需要登陆以后来获取下载地址。</p> \r\n<p>为了能够让大家看到Docker从零开始安装的逐个过程，那么我做了一个win10的虚拟机，在虚拟机上给大家重现完整流程。当然了在你自己电脑上并不需要做虚拟机，只需要直接安装就行了。我们打开VMware虚拟机软件，在这找到之前安装好的win10虚拟机，作为win10虚拟机有一个地方特别需要注意。 在虚拟机的环境配置中，内存一定要大于等于4个G 同时cpu选择四核，并开启虚拟化，其余根据你的硬件配置灵活调整就可以了。 <img src=\"http://cdn.itlaoqi.com/attachment/20200406/5be96188538444dd966121dce0120937.jpg\" alt=\"\"> 虚拟机已经启动成功了。找到运行Docker的安装文件。作为Docker，刚开始他会检查系统的环境以及下载必要的包。那么如果前置检查成功。 它就会提示让我们开始安装。在这里我们一定要注意，操作系统作为操作系统必须是windows专业版或者是旗舰版才可以。点OK以后他开始安装。作为整体的Docker，安装流程非常简单，只需要这一步。 <img src=\"http://cdn.itlaoqi.com/attachment/20200406/14da5e12994145c2a0bd973c8c4357fe.jpg\" alt=\"\"> 桌面上出现了Docker desktTop桌面版，我们可以双击打开，同时在底层Docker的服务也会随着应用启动。</p> \r\n<p>这里提示我们，Docker正在启动，右下角会出现小鲸鱼的图标。 <img src=\"http://cdn.itlaoqi.com/attachment/20200406/10e0b31f497e4f3ab8cda8dc371d9a12.jpg\" alt=\"\"> 在第一次启动的时候，它会提示你Hyper-V或者容器化性能并没有被启用，是否去启用，他们必须要求我们重启计算机才可以，那直接点OK下面我们要重启电脑。 重新启动后，重新运行docker，重新提示Docker正在启动。 <img src=\"http://cdn.itlaoqi.com/attachment/20200406/7581d2e52be74bbb9a2eed7fa8fcc3b2.jpg\" alt=\"\"> 右下角可以看到docker Desktop is Starting正在启动，稍等片刻以后，Docker启动成功，他提示我们输入Docker的用户名和密码，这个我们可以跳过。此时在右下角看到docker Desktop is running代表Docker启动成功了。对于我们来说，如何验证Docker安装成功了，非常简单，可以进入windows的命令行。默认情况下，在命令行输入</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">docker</span> version\r\n</code></pre> \r\n<p>你就可以看到Docker当前的版本号。</p> \r\n<p>对于Docker来说，如果我们要去使用它也是非常简单的,输入</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">Docker</span> pull hello-word\r\n</code></pre> \r\n<p>Docker会从仓库中把hello word测试镜像进行下载，可以看到它提示我们正在pulling拉取，我们当看到 pull complete 代表已经拉取成功，这个镜像被下载到了本地，我们可以来运行一下。 使用</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">docker</span> run hello-word\r\n</code></pre> \r\n<p>如果你看到这里出现\"hello from Docker\"则代表我们windows版本的Docker安装成功了。</p>\r\n        </div>', '2020-09-15 11:46:20', 1);
INSERT INTO `article` VALUES (1649, 'Centos系统安装Docker', '<div class=\"cl-artical\">\r\n            <p>本文我们来学习在Linux环境下如何进行安装，因为在线上的服务器90%都是Linux环境的。本次课程咱们是用Linux的centos操作系统来进行演示，至于像Ubuntu非常相似。 那么咱们在这直接启动终端，在终端界面我们依次输入一些命令</p> \r\n<ol> \r\n <li>安装底层工具</li> \r\n</ol> \r\n<pre><code class=\"hljs sql\">sudo yum <span class=\"hljs-keyword\">install</span> -y yum-utils device-mapper-persistent-<span class=\"hljs-keyword\">data</span> lvm2\r\n</code></pre> \r\n<p>这是我们安装Docker的底层工具，它就会自动的给我们提示下载，很快下载就完成了。</p> \r\n<ol start=\"2\"> \r\n <li>加入阿里云仓库提速下载过程</li> \r\n</ol> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">sudo</span> yum config manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\r\n</code></pre> \r\n<p>增加我们阿里云的Docker下载仓库，默认情况下，Docker官方是从他的国外的服务器下载速度是非常慢的，所以在这里我们是使用yum config manager组件来指定一个新的下载源，指向的是阿里的应用服务器，通过阿里来提高我们Docker的下载速度。</p> \r\n<ol start=\"3\"> \r\n <li>更新一下仓库的源信息</li> \r\n</ol> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">sudo</span> yum makecache fast\r\n</code></pre> \r\n<ol start=\"4\"> \r\n <li>自动安装下载Docker</li> \r\n</ol> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">sudo</span> yum -y install docker-ce\r\n</code></pre> \r\n<p>在这里它就会自动的下载解析，可以看到利用阿里云下载速度是非常快的,我们的Docker便自动安装成功。</p> \r\n<ol start=\"5\"> \r\n <li>启动Docker服务</li> \r\n</ol> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">sudo</span> service docker start\r\n</code></pre> \r\n<p>最后咱们来验证一下，</p> \r\n<ol start=\"6\"> \r\n <li>验证docker是否启动成功</li> \r\n</ol> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">docker</span> version\r\n</code></pre> \r\n<p>至此docker-ce版本安装成功 这里我们使用和windows环境完全相同的命令，docker它的安装过程，因为操作系统可能有不同，但是命令每个平台都是一样的，docker version显示我们当前已安装的版本，这里是1809.7，这个版本其实就是对应于我们windows的2.0.3。</p>\r\n        </div>', '2020-09-15 11:46:23', 1);
INSERT INTO `article` VALUES (1652, '利用Dockerfile构建自定义镜像', '<div class=\"cl-artical\">\r\n            <p>你好，我是老齐,本节咱们来学习使用docker file配置文件，构建属于自己的镜像。回到咱们的控制台，在这首先来看一下。上一节课我们学习了如何从远程仓库来安装tomcat 镜像。对于这个tomcat来说，只要运行一个非常简单的命令。</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">Docker</span> run -p <span class=\"hljs-number\">8000</span> tomcat\r\n</code></pre> \r\n<p>马上一个全新的tomcat就会给我们完成自动部署，但这里也衍生出来一个问题，作为当前的tomcat他并不是一个有效的应用，因为我们并没有在上面发布任何属于自己的web页面，未来我们希望在tomcat的基础上安装自己的网页该怎么做呢？</p> \r\n<p>这就需要我们编写一个Docker中独有的文件dockerfile。什么是dockerfile？我们来看一下。</p> \r\n<pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">利用FROM命令设置基准镜像</span>\r\nFROM tomcat:latest\r\n<span class=\"hljs-meta\">#</span><span class=\"bash\"><span class=\"hljs-built_in\">cd</span> /usr/<span class=\"hljs-built_in\">local</span>/tomcat/webapps</span>\r\nWORKDIR /usr/local/tomcat/webapps\r\n<span class=\"hljs-meta\">#</span><span class=\"bash\">ADD用于复制本地文件到镜像中</span>\r\nADD docker-web ./docker-web\r\n</code></pre> \r\n<p>它的作用是对我们的镜像进行描述，描述我们的镜像到底要做哪些工作，在这个文件中它书写了一系列的指令，通过这些指令docker就知道我们如果要安装一个tomcat，需要哪几步,安装 一个redis需要哪几步，这非常像我们linux中的shell脚本或者是windows中的bat。</p> \r\n<p>作为dockerfile 提供了很多的命令，每一个命令都有他自己的用意，归根到底它就是为了完成我们一个新镜像的制作。 文中涉及的源代码和训练素材可以从下面链接下载</p> \r\n<p><a href=\"http://itlaoqi.com/chapter/1653.html\">http://itlaoqi.com/chapter/1650.html</a></p> \r\n<p>下面我们分别介绍一下每一句的含义:</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-comment\">#利用FROM命令设置基准镜像</span>\r\n<span class=\"hljs-attribute\">FROM</span> tomcat:latest\r\n</code></pre> \r\n<p>现在我们新创建一个核心的配置文件，这个文件名就叫Dockerfile。注意这个文件名是不要有任何扩展名的，作为Dockerfile他要描述我们新产生镜像的一系列操作步骤， from代表我们从哪个基准镜像进行扩展，作为大多数应用都是在现有的镜像基础上扩展而来的，所以这里的tomcat就是tomcat镜像进行扩展。 这里还会涉及到一个新问题，tomcat后面冒号LATEST是什么呢？它是版本号在前面，我们不是下载了tomcat吗？来看一下，作为tomcat是镜像名字，但是tag其实对应的就是版本了，如果下载时没有指定的话，默认就会下载LATEST的版本，这里我from以后书写的格式就是镜像的名字冒号再加上tag版本号，这样我们就可以在镜像基础上进行扩展了。</p> \r\n<pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"><span class=\"hljs-built_in\">cd</span> /usr/<span class=\"hljs-built_in\">local</span>/tomcat/webapps 切换镜像内部工作目录</span>\r\nWORKDIR /usr/local/tomcat/webapps\r\n\r\n</code></pre> \r\n<p>workdir指向/usr/local/tomcat/webapps workdir代表工作目录的意思，其实非常像我们在Linux中的cd。这个指令我们将当前工作的目录跳转到这个目录下</p> \r\n<p>小技巧:如何进入指定容器呢,使用下面命令,确定要切换的工作目录?</p> \r\n<pre><code class=\"hljs bash\">docker <span class=\"hljs-built_in\">exec</span> -it 容器编号 /bin/bash\r\nls\r\n<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-string\">\'usr/local/tomcat/webapps\r\n</span></code></pre> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-comment\">#ADD用于复制本地文件到镜像中</span>\r\n<span class=\"hljs-attribute\">ADD</span> docker-web ./docker-web\r\n</code></pre> \r\n<p>ADD命令ADD是复制的意思，ADD命令用于复制本地的文件到镜像的指定位置。至于它的用法也很简单，第一个参数docker-web是指我们本地的目录。第二个参数是指向镜像中要复制到哪个目录, 这个文件夹如果不存在的话，则docker会自动创建。 作为文件存储好了怎么用？只有通过构建加载dockerfile才可以完成新的镜像构建。</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">docker</span> build -t 镜像名:版本号 dockerfile所在目录\r\n</code></pre> \r\n<p>build的就是构建的意思，根据指定的dockerfile来进行新镜像的构建, 在build的后面我们增加一个参数-t，-t代表为新镜像赋予一个名字。例如这里itlaoqi/mydocker-web:1.0，而第二个参数是要指向dockerfile所在的目录是哪个 <img src=\"/attachment/20200406/9d6f7c71133e49089f74216279ef4ea7.jpg\" alt=\"\"></p> \r\n<p>构建好以后，来咱们再利用</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">Docker</span> images\r\n</code></pre> \r\n<p>查看本地所有经验，itlaoqi/mydocker-web出现在列表 <img src=\"/attachment/20200406/a6fecd90e24343d1a6379a7b78033d54.jpg\" alt=\"\"></p> \r\n<p>利用docker run创建新的容器</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">docker</span> run -p <span class=\"hljs-number\">8001</span>:<span class=\"hljs-number\">8080</span> itlaoqi/mydocker-web:<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span>\r\n</code></pre> \r\n<p>这样我们便完成了从dockerfile编写到容器运行的全过程. 在后面的章节我们将继续学习dockerfile中各种常用命令的使用办法</p>\r\n        </div>', '2020-09-15 11:46:26', 1);
INSERT INTO `article` VALUES (1653, 'Dockerfile基础指令', '<div class=\"cl-artical\">\r\n             \r\n \r\n<h3>from</h3> \r\n<p>from这个指令是基于基准镜像来设计的。什么叫基于基准镜像？顾名思义，我们在构建新镜像时候，你要依托于哪个原有的镜像进行扩展。比方说在这里我书写</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">from</span> centos\r\n</code></pre> \r\n<p>前面的from自然是Dockerfile的命令，而后面的centos则是centos远程仓库的镜像。在制作的时候，自然基于centos:lastest，也就是最新版本来进行扩展。 但是有一些特殊的场景，假设我们并不需要任何系统，只希望从零开始构建一个镜像的话，这时在我们的文件第一行你可以书写</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">from</span> scratch\r\n</code></pre> \r\n<p>代表不依赖任何基准镜像，从零开始，这种情况是非常少见的。 而下面的这个事例更说明问题</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">from</span> tomcat:<span class=\"hljs-number\">9</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">22</span>-jdk8-openjdk\r\n</code></pre> \r\n<p>冒号后面是一个版本，好，这又是什么意思呢？作为from tomcat都知道这是拿tomcat镜像，后面如果增加了冒号以后，则指明我们要下载某个特定的版本。 在这里9.0.22-jdk8-openjdk就是远程仓库给我们提供了对应版本。在前面的centos这个位置上，我们没有写冒号，它默认就会给我们下载lastest最新版，这是Docker的默认规则。 对于from基准镜像来说，这里有一个建议，作为Docker来说，尽量开发的时候，基于官方提供的Base image基准镜像来进行。 因为官方提供的我们可以认为它是安全的，如果是由其他第三方所提供的，这里他做了什么手脚我们就不清楚了。</p> \r\n<h3>label</h3> \r\n<p>label就是说明信息，如果放在程序中就是注释了。label没有任何功能性，它的作用就是写Dockerfile里边用于说明.</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">label</span> maintainer = <span class=\"hljs-string\">\"itlaoqi\"</span>\r\nlabel version = <span class=\"hljs-string\">\"1.0\"</span>\r\nlabel description = <span class=\"hljs-string\">\"ITLAOQI应用镜像\"</span>\r\n</code></pre> \r\n<p>比方说这里我写了三个label，第一个说明我们的作者是谁？第二个label代表了当前Dockerfile的版本号，而第三个说明了当前镜像的用途和描述。这就是label的作用。别小看label的作用，虽然它没有任何功能，但是却为我们程序维护性提供了极大的便利。试想一下，你看到一年前你自己写的，Dockerfile还能想起来它的作用吗？如果此时有这些描述信息，那是多么的方便。</p> \r\n<h3>workdir</h3> \r\n<p>workdir设置工作目录，它和我们linux的cd命令非常的相似，就是用于设置当前的工作目录，</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">workdir</span> /usr/lcoal\r\n</code></pre> \r\n<p>代表的我们将当前工作目录设置为usr/local，作为这个目录如果不存在的话，默认规则workdir会对其进行创建。</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">workdir</span> ./local\r\n</code></pre> \r\n<p>workdir具备了创建目录的功能，在使用的时候我的建议是workdir虽然可以像cd一样来进行相对路径的跳转，但我更加建议在使用时使用绝对路径，也就是所有路径都以斜杠开头，书写完整的地址。</p> \r\n<h3>add©</h3> \r\n<p>add©。这个是两个命令，我放在一块来说，它们功能非常的相似，主要用于复制文件。那么大多数情况下这里出现ADD你也可以把它替换成copy。</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ADD</span> hello / <span class=\"hljs-comment\">#复制到根路径</span>\r\n</code></pre> \r\n<p>这条语句的作用就是指将hello这个文件复制到我们linux的根路径下。</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ADD</span> test.tar.gz / <span class=\"hljs-comment\">#添加根目录并解压</span>\r\n</code></pre> \r\n<p>同样的ADD还有一个高级的功能，就是自动解压缩，如果我们指向的是一个test.tar.gz压缩包的话，后面跟的路径，它会自动将这个文件解压缩以后放在这个目录中。</p> \r\n<p>那么ADD除了复制功能以外，它比起copy还具备着去拉取远程文件的功能。这和我们在linux系统中使用的curl或者wget命令非常的相似，可以说ADD它是我们平时构建镜像时非常常用的一个命令，帮助我们将文件从物理机复制到镜像当中去。</p> \r\n<h3>env</h3> \r\n<p>ENV设置环境常量，什么是环境常量呢？其实非常好理解。以前我们都在做java，如果jdk要使用的话，是不是要在系统中设置一个名为java_home的这么一个环境变量，那么在docker中也有类似的设置，这里使用env再加上环境常量的名字，后面再增加具体的值就行了。</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ENV</span> JAVA_HOME /usr/local/openjdk8\r\nRUN <span class=\"hljs-variable\">${JAVA_HOME}</span>/bin/java -jar test.jar\r\n</code></pre> \r\n<p>就拿这个例子，env Java_home后边加上这个路径说明java_home它指向了这个地址，也就是java_home就指代了后面的路径。 那么在使用时可以使用run来运行某个linux的指令，只不过在这使用${}加上我们环境常量来进行替代。它具体的作用就相当于执行了open jdk8 bin目录下的java应用，并执行了test.jar。在这儿我们又涉及到了一个新的命令run,run用于执行linux的命令，不过现在我们先不去讲它，下一节要对它进行详细的讲解。 作为env我们推荐优先去使用，因为它可以提高我们程序的维护性。 假设在dockerfile中出现了多处需要执行Java命令的地方，我们只需要设置java_home便可以进行指代。 假设未来环境发生变化，jdk被放到了其他的位置上，没有关系，只需要改这一处，所有的应用都会生效。</p> \r\n<h3>expose</h3> \r\n<p>expose暴露容器端口expose它的作用是将我们容器内部的端口对外暴露。书写办法也非常简单，就是这个单词后边增加对应的端口号就行了。 作为expose，它的作用就是将容器内端口暴露给物理机。 <img src=\"http://cdn.itlaoqi.com/attachment/20200406/a03ae808114041bd939720b51b9049f8.JPG\" alt=\"\"> 来，我们看一下这张图，作为外侧的红的部分，可以认为这是我们的一台服务器物理机。而内侧我们启动了一个tomcat容器。这里如果dokcerfile中定义了expose 8080的话，就相当于在内侧的容器中对外暴露了8080端口。 同时我们在创建容器的时候。</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">EXPOSE</span> <span class=\"hljs-number\">8080</span>\r\ndocker run -p <span class=\"hljs-number\">8000</span>:<span class=\"hljs-number\">8080</span> tomcat\r\n</code></pre> \r\n<p>可以看到这里我做了一个-P8000：8080，它的作用是在物理机也就是外侧的地方，用8000映射到内侧的8080端口。这样内侧的服务一旦启动，在外侧我们浏览器中输入localhost:8000的话，就可以访问到内部的8080端口提供的web应用了。这便是expose的用法。 作为Dockerfile，刚才我给大家演示了最基础，也是最常见的几个指令，但是这并不能足够支撑我们构建一个镜像，因为在除了复制切换目录暴露端口之外，还有大量的Linux的命令需要执行，那该怎么做？下一节我们继续讲解。</p>\r\n        </div>', '2020-09-15 11:46:28', 1);
INSERT INTO `article` VALUES (1655, 'MySQL快速部署与初始数据', '<div class=\"cl-artical\">\r\n            <p>你好，我是老齐，本节咱们来学习快速部署MySQL，并为其初始化数据库！在以前的学习过程中，经常有同学问我，老师你的数据库脚本在哪？老师我的MySQL安装不上，老师我的脚本导入不了，像这种事情经常困扰着我，也困扰着在座的各位。</p> \r\n<p>其实如果使用docker以后，我们完全可以避免这种问题。本节我们就来学习如何快速部署一个MySQL5.7，并为其初始化数据。下边咱们说做就做。 首先上来咱们第一步先进入到 <a href=\"http://hub.docker.com\">hub.docker.com</a> 来看一下我们的镜像有哪些？这里输入MySQL，很快MySQL就出现了，那么点击以后来查看里边有具体的哪些版本？ <img src=\"http://cdn.itlaoqi.com/attachment/20200406/d587e9b63a2348c3bb2bb0e50692337f.JPG\" alt=\"\"> 可以看到在MySQL这个位置上出现了我们可以使用的MySQL官方的docker镜像，这里有8.x也有5.x 那么我们要使用5.7.26这个版本，但对于我们来说先不着急去用它，我们点击这个版本，当点击以后可以看到，马上就链接到了github上面。</p> \r\n<p>这是MySQL官方镜像的共享文档，在这儿默认展现的是Dockerfile也就是我们5.7版本MySQL的构建的脚本了。那么在这个脚本中我们把注意力放在第23行上，这里Dockerfile在构建十执行一句话。mkdir创建一个目录，这个目录关键了docker-entrypoint-initdb.d这个地址是干什么用的？看名字是用于初始化数据库的。 这个目录在构建时被创建里边放什么东西呢？在这儿我们回到docker镜像的介绍页面，当回到介绍页面以后来向下寻找。在这个Initializing a fresh instance边有描述说道， <img src=\"http://cdn.itlaoqi.com/attachment/20200406/33fb79dfdf13424bb97a48c1d4987919.JPG\" alt=\"\"> 作为当前的目录允许扩展名为.sh .sql 以及 .sql.gz文件放入其中，如果是.sh则直接执行，如果是.sql则自动被MySQL进行导入，而.sql.gz压缩文件会解压以后再进行导入，那么这个文件夹正好符合我们的要求，我们只需要将自己的建表脚本放入到这个目录中就可以了。</p> \r\n<p>下边咱们说做就做。来，现在我们找到源代码，我创建了一个叫simple db的目录，这里有一个初始化脚本，init.sql我们现在打开他看一下</p> \r\n<pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">database</span> <span class=\"hljs-string\">`docker_mysql`</span>;\r\n \r\n<span class=\"hljs-keyword\">use</span> docker_mysql;\r\n \r\n<span class=\"hljs-comment\">-- 建表</span>\r\n<span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">IF</span> <span class=\"hljs-keyword\">EXISTS</span> <span class=\"hljs-string\">`user`</span>;\r\n \r\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`user`</span> (\r\n <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">bigint</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\r\n <span class=\"hljs-string\">`created_at`</span> <span class=\"hljs-built_in\">bigint</span>(<span class=\"hljs-number\">40</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\r\n <span class=\"hljs-string\">`last_modified`</span> <span class=\"hljs-built_in\">bigint</span>(<span class=\"hljs-number\">40</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\r\n <span class=\"hljs-string\">`email`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\r\n <span class=\"hljs-string\">`first_name`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\r\n <span class=\"hljs-string\">`last_name`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\r\n <span class=\"hljs-string\">`username`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span>,\r\n PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>)\r\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=latin1;\r\n \r\n<span class=\"hljs-comment\">-- 插入数据</span>\r\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> <span class=\"hljs-string\">`user`</span> (<span class=\"hljs-string\">`id`</span>, <span class=\"hljs-string\">`created_at`</span>, <span class=\"hljs-string\">`last_modified`</span>, <span class=\"hljs-string\">`email`</span>, <span class=\"hljs-string\">`first_name`</span>, <span class=\"hljs-string\">`last_name`</span>, <span class=\"hljs-string\">`username`</span>)\r\n<span class=\"hljs-keyword\">VALUES</span>\r\n  (<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1490257904</span>,<span class=\"hljs-number\">1490257904</span>,<span class=\"hljs-string\">\'john.doe@example.com\'</span>,<span class=\"hljs-string\">\'John\'</span>,<span class=\"hljs-string\">\'Doe\'</span>,<span class=\"hljs-string\">\'user\'</span>);\r\n</code></pre> \r\n<p>我们如何与docker进行联动？首先进入windows的命令行，在这里直接输入</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">docker</span> pull mysql:<span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">7</span>\r\n</code></pre> \r\n<p>在init.sql同级下创建一个Dockerfile，作为Dockerfile文件，现在要增加一些文件复制的代码。</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">FROM</span> mysql:<span class=\"hljs-number\">5</span>.<span class=\"hljs-number\">7</span>\r\nWORKDIR /docker-entrypoint-initdb.d\r\nADD init.sql .\r\n</code></pre> \r\n<p>首先书写from MySQL:5.7，设置基准镜像，之后，用workdir来设置我们工作目录。把它定位到以后，紧接着使用ADD命令，将当前目录的init.sql文件复制到容器中的目录中，把这三行写上，那么在MySQL5.7容器启动时，就会自动加载配置文件并执行它。</p> \r\n<p>之后咱们要进行镜像的构建了。</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">docker</span> build -t itlaoqi-sampledb F:\\IT加油站\\Docker与K8S容器化实践\\源代码\\sampledb\r\n</code></pre> \r\n<p>作为init.sql这个文件被自动地复制到了目录中。下边关键的地方来了，我们要构建容器， 利用docker run -P进行端口映射。我们都知道MySQL默认的端口号是3306，那么我们要进行映射的时候不妨这么写，3310是外部的端口，而容器内部3306写上。</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">docker</span> run -p <span class=\"hljs-number\">3310</span>:<span class=\"hljs-number\">3306</span> -e MYSQL_ROOT_PASSWORD=root itlaoqi-sampledb\r\n</code></pre> \r\n<p>同时还有一个关键的设置-e。-e之前我们没有讲过，其实非常简单，它就是环境常量的意思。 在这儿我们书写MYSQL_ROOT_PASSWORD。这个环境常量是由MYSQL5.7镜像所定义的，在这里用于，设置root的初始化密码用户名root，密码root。最后要增加docker的名称。itlaoqi-sampledb，把这个写好，回车。请看屏幕上就会有一系列的输出，我们要做的只需要等待。好的，当你看到了五点7.26 3306的时候，就代表我们MySQL容器启动成功了，此时可以ctrl+C退出。 <img src=\"http://cdn.itlaoqi.com/attachment/20200406/50fce03bde444da294f2983e87de1d6e.JPG\" alt=\"\"> 在这里我们不妨来看一下外侧的端口3310是否出现了？</p> \r\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">netstat</span> -ano|grep <span class=\"hljs-number\">3310</span>\r\n</code></pre> \r\n<p><img src=\"http://cdn.itlaoqi.com/attachment/20200406/ebaf5ad2f108471dac0b26ecf6486d2c.JPG\" alt=\"\"> Mysql 5.7 3310端口部署成功</p>\r\n        </div>', '2020-09-15 11:46:31', 1);
INSERT INTO `article` VALUES (2566, '1-1 JVM与混合语言编程', '<p><strong><span style=\"font-size:15pt\"><span style=\"color:#000000\"><strong>JVM与混合语言编程</strong></span></span></strong></p>\n\n<ul>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>感谢祖师爷</strong></span></span></strong></strong></span></span></li>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>世界上最好的虚拟机平台JVM</strong></span></span></strong></strong></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JVM是编程开发的平台</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JVM面向字节码执行</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">任何语言只要能编译.class字节码都可以被JVM识别运行</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">字节码与平台无关</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JVM将字节码指令转换为对应系统的底层指令运行进而实现跨平台特性</span></span></span></span></li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>常见运行在JVM上的开发语言</strong></span></span></strong></strong></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Java</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">不解释</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Groovy</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JAVA的敏捷开发脚本</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Grails</span></span></span></span>\n				<ul style=\"list-style-type:disc\">\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">毛子常用的敏捷开发框架</span></span></span></span></li>\n				</ul>\n				</li>\n			</ul>\n			</li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Kotlin</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Google的安卓开发语言</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Jython</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Python的JVM版本</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Clojure</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">并发编程用它准没错了</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Scala</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Spark大数据库开发的天生绝配</span></span></span></span></li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/f04d6d8dc2474607823ae610275b0e2b.jpg\" style=\'max-width:100%\' /></p>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/36011e2c918c4f0baa7494ccb92f861b.png\" style=\'max-width:100%\' /></p>\n\n<p>&nbsp;</p>\n', '2020-07-08 00:00:00', 1);
INSERT INTO `article` VALUES (2567, '1-2 JVM发展及种类', '<p><strong><span style=\"font-size:15pt\"><span style=\"color:#000000\"><strong>JVM的发展与种类</strong></span></span></strong></p>\n\n<p><strong>&nbsp;</strong></p>\n\n<ul>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>Sun自家</strong></span></span></strong></strong></span></span>\n\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">1.0时代 Sun Classic VM</span></span></span></span>\n\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">1.4被淘汰</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">只提供Java解释器逐行执行</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">外挂即时编译器编译为本地机器指令</span></span></span></span></li>\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">热点探测</span></span></span></span></li>\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JIT与解释器只能2选1</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Hotspot内置</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">1.2时代 Exact VM</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">编译器与解释器混合工作</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">热点探测</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">现在JVM的前身</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Solaris 平台使用,其他还是Classic</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">1.3 至今仍在使用 HotSpot</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Logview Techno公司设计,被sun收购,又被Oracle收购</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Sun JDK与OpenJDK默认VM</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Sun/Oracle与OpenJDK的区别</span></span></span></span>\n				<ul style=\"list-style-type:disc\">\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Sun JDK</span></span></span></span>\n					<ul style=\"list-style-type:disc\">\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JRL只允许个人研究</span></span></span></span></li>\n					</ul>\n					</li>\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">OpenJDK</span></span></span></span>\n					<ul style=\"list-style-type:disc\">\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">GPL V2允许商用</span></span></span></span></li>\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">不包含Deployment部署功能</span></span></span></span></li>\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">OpenJDK代码不完整,无法通过TCK兼容测试,不能使用Java商标</span></span></span></span>\n						<ul style=\"list-style-type:disc\">\n							<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">RedHat在07年发布IcedTea计划,致力于修复OpenJDK</span></span></span></span></li>\n						</ul>\n						</li>\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">只包含最精简的JDK,不包含其他软件包 ,可自行安装 Rhino/JAXP</span></span></span></span></li>\n					</ul>\n					</li>\n				</ul>\n				</li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">HotSpot(热点探测技术)</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">通过编译器找到最具价值的代码,称为热点代码,翻译成机器指令,在本地进行缓存,提高执行效率</span></span></span></span></li>\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">解释器与编译器编译协同工作,在程序响应时间(逐行执行)与执行性能(热点探测)做到平衡</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">只有HotSpot才有方法区</span></span></span></span></li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>其他厂商</strong></span></span></strong></strong></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JRockit</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">BEA公司设计,2008被Oracle收购</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">最快的JVM</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">用户体验显著提高超过70%</span></span></span></span></li>\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">更低的硬件成本</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">专注与服务器端</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">不包含解释器</span></span></span></span>\n				<ul style=\"list-style-type:disc\">\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">只包含即时编译器</span></span></span></span></li>\n				</ul>\n				</li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Oracle希望两者整合 HotSpot与JRockit</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JRockit占据主导地位</span></span></span></span>\n				<ul style=\"list-style-type:disc\">\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">高斯林辞职去谷歌</span></span></span></span>\n					<ul style=\"list-style-type:disc\">\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">研究人工智能与水下机器人</span></span></span></span></li>\n					</ul>\n					</li>\n				</ul>\n				</li>\n			</ul>\n			</li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">IBM &nbsp;J9</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">IBM Technology for Java Virtual Machine,IT4J,内部代号J9</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">也号称最快</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">现实呵呵哒</span></span></span></span>\n				<ul style=\"list-style-type:disc\">\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">只有在IBM自己的产品上使用才快</span></span></span></span></li>\n				</ul>\n				</li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">市场定位与HotSpot接近,服务器端/桌面应用/嵌入式等多用途</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">2017年J9开源,OpenJ9</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">TaobaoJVM</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">基于OpenJDK Hotspot</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">全面替换Oracle JVM</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">为淘宝应用场景量身打造</span></span></span></span></li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/b22a8442eda846b6b55721768709bc84.png\" style=\'max-width:100%\' /></p>\n\n<p>大图可点击放大查看</p>\n\n<p>&nbsp;</p>\n', '2020-07-08 00:00:00', 1);
INSERT INTO `article` VALUES (2568, '1-3 其他JVM介绍', '<p><strong><span style=\"font-size:15pt\"><span style=\"color:#000000\"><strong>JVM的发展与种类</strong></span></span></strong></p>\n\n<p><strong>&nbsp;</strong></p>\n\n<ul>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>Sun自家</strong></span></span></strong></strong></span></span>\n\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">1.0时代 Sun Classic VM</span></span></span></span>\n\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">1.4被淘汰</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">只提供Java解释器逐行执行</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">外挂即时编译器编译为本地机器指令</span></span></span></span></li>\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">热点探测</span></span></span></span></li>\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JIT与解释器只能2选1</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Hotspot内置</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">1.2时代 Exact VM</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">编译器与解释器混合工作</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">热点探测</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">现在JVM的前身</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Solaris 平台使用,其他还是Classic</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">1.3 至今仍在使用 HotSpot</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Logview Techno公司设计,被sun收购,又被Oracle收购</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Sun JDK与OpenJDK默认VM</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Sun/Oracle与OpenJDK的区别</span></span></span></span>\n				<ul style=\"list-style-type:disc\">\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Sun JDK</span></span></span></span>\n					<ul style=\"list-style-type:disc\">\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JRL只允许个人研究</span></span></span></span></li>\n					</ul>\n					</li>\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">OpenJDK</span></span></span></span>\n					<ul style=\"list-style-type:disc\">\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">GPL V2允许商用</span></span></span></span></li>\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">不包含Deployment部署功能</span></span></span></span></li>\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">OpenJDK代码不完整,无法通过TCK兼容测试,不能使用Java商标</span></span></span></span>\n						<ul style=\"list-style-type:disc\">\n							<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">RedHat在07年发布IcedTea计划,致力于修复OpenJDK</span></span></span></span></li>\n						</ul>\n						</li>\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">只包含最精简的JDK,不包含其他软件包 ,可自行安装 Rhino/JAXP</span></span></span></span></li>\n					</ul>\n					</li>\n				</ul>\n				</li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">HotSpot(热点探测技术)</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">通过编译器找到最具价值的代码,称为热点代码,翻译成机器指令,在本地进行缓存,提高执行效率</span></span></span></span></li>\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">解释器与编译器编译协同工作,在程序响应时间(逐行执行)与执行性能(热点探测)做到平衡</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">只有HotSpot才有方法区</span></span></span></span></li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>其他厂商</strong></span></span></strong></strong></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JRockit</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">BEA公司设计,2008被Oracle收购</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">最快的JVM</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">用户体验显著提高超过70%</span></span></span></span></li>\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">更低的硬件成本</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">专注与服务器端</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">不包含解释器</span></span></span></span>\n				<ul style=\"list-style-type:disc\">\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">只包含即时编译器</span></span></span></span></li>\n				</ul>\n				</li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Oracle希望两者整合 HotSpot与JRockit</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JRockit占据主导地位</span></span></span></span>\n				<ul style=\"list-style-type:disc\">\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">高斯林辞职去谷歌</span></span></span></span>\n					<ul style=\"list-style-type:disc\">\n						<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">研究人工智能与水下机器人</span></span></span></span></li>\n					</ul>\n					</li>\n				</ul>\n				</li>\n			</ul>\n			</li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">IBM &nbsp;J9</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">IBM Technology for Java Virtual Machine,IT4J,内部代号J9</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">也号称最快</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">现实呵呵哒</span></span></span></span>\n				<ul style=\"list-style-type:disc\">\n					<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">只有在IBM自己的产品上使用才快</span></span></span></span></li>\n				</ul>\n				</li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">市场定位与HotSpot接近,服务器端/桌面应用/嵌入式等多用途</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">2017年J9开源,OpenJ9</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">TaobaoJVM</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">基于OpenJDK Hotspot</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">全面替换Oracle JVM</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">为淘宝应用场景量身打造</span></span></span></span></li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/b22a8442eda846b6b55721768709bc84.png\" style=\'max-width:100%\' /></p>\n\n<p>大图可点击放大查看</p>\n\n<p>&nbsp;</p>\n', '2020-07-08 00:00:00', 1);
INSERT INTO `article` VALUES (2569, '1-4 JVM的组成', '<p><strong><span style=\"font-size:15pt\"><span style=\"color:#000000\"><strong>JVM的组成</strong></span></span></strong></p>\n\n<p><strong>&nbsp;</strong></p>\n\n<ul>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>类加载子系统</strong></span></span></strong></strong></span></span>\n\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">读取并加载字节码文件</span></span></span></span>\n\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">将加载后的类信息保存到&quot;运行时数据区&quot;</span></span></span></span></li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>运行时数据区</strong></span></span></strong></strong></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">线程共享区</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">堆</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">保存对象的地方</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">方法区</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">保存类/字段/方法的定义信息</span></span></span></span></li>\n			</ul>\n			</li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">线程私有区</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">虚拟机栈</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">保存方法调用过程中的数据</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">程序计数器(PC寄存器)</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">保存程序执行位置的地方</span></span></span></span></li>\n			</ul>\n			</li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">本地方法栈</span></span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">保存本地方法的执行过程</span></span></span></span></li>\n				<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">TIPS:能不用本地方法就不用本地方法</span></span></span></span></li>\n			</ul>\n			</li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>执行引擎</strong></span></span></strong></strong></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">将字节码指令&quot;翻译&quot;为机器指令</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">执行引擎用于计算,与CPU交互</span></span></span></span></li>\n	</ul>\n	</li>\n	<li><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>本地方法接口</strong></span></span></strong></strong></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">JVM与操作系统本地dll/so调用的桥梁</span></span></span></span><br />\n		<span style=\"font-size:10.5pt\"><span style=\"color:#000000\">&nbsp;</span></span></li>\n	</ul>\n	</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/3715177e5290426aaa4850431cc56f51.png\" style=\'max-width:100%\' /></p>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/97003798830242359a4e143f5fb1ffba.jpg\" style=\'max-width:100%\' />&nbsp;</p>\n', '2020-07-08 00:00:00', 1);
INSERT INTO `article` VALUES (2570, '2-1 字节码简介', '<p>字节码的特点</p>\n\n<ul>\n	<li>.java源码经过javac编译生成的二进制(文件),称为字节码(文件)</li>\n	<li>JVM通过字节码保证平台无关特性</li>\n	<li>Java并不是唯一生成class文件的语言</li>\n	<li>Class是结构紧凑的二进制流,其格式固定,要求严谨<br />\n	<img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.comhttps://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/36011e2c918c4f0baa7494ccb92f861b.png\" style=\'max-width:100%\' /></li>\n</ul>\n', '2020-07-08 00:00:00', 1);
INSERT INTO `article` VALUES (2571, '2-2 字节码组成-魔数与版本号', '<p><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong><strong><span style=\"font-size:12pt\"><span style=\"color:#000000\"><strong>字节码组成结构</strong></span></span></strong></strong></span></span></p>\n\n<ul style=\"list-style-type:disc\">\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Class文件格式细节</span></span></span></span>\n\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">魔数</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">Class文件版本</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">常量池</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">类索引/父类索引与接口索引集合</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">访问标志</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">字段表集合</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">方法表集合</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">属性表</span></span></span></span></li>\n	</ul>\n	</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/183d5fa900d54b74a2c29f1b93a7dadd.jpg\" style=\'max-width:100%\' /></p>\n\n<ul>\n	<li style=\"list-style-type: none;\">\n	<ul>\n		<li style=\"list-style-type: none;\">&nbsp;</li>\n	</ul>\n	</li>\n</ul>\n\n<p><span style=\"font-size:16px\"><strong><span style=\"color:#000000\"><span style=\"color:#000000\">魔数与Class文件版本</span></span></strong></span></p>\n\n<ul style=\"list-style-type:disc\">\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">魔数就是区分文件的依据</span></span></span></span></li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">OxCAFEBABE</span></span></span></span></li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">5~6字节次要版本号</span></span></span></span></li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">7~8字节主要版本号</span></span></span></span></li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">不同JDK版本可执行不同范围版本号</span></span></span></span></li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">用二进制打开JDK8 Class看一下</span></span></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">加入Class文件版本号图</span></span></span></span></li>\n	</ul>\n	</li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">可利用Javap查看字节码数据</span></span></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">javap -l -v -c class文件名</span></span></span></span></li>\n	</ul>\n	</li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">字节码版本高于JVM版本,产生UnsupportedClassVersionError</span></span></span></span></li>\n</ul>\n\n<p>&nbsp;<img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/21dfa026c4fe4fd0bd6438f1f6428eb8.jpg\" style=\'max-width:100%\' /></p>\n', '2020-07-08 00:00:00', 1);
INSERT INTO `article` VALUES (2572, '2-3 Idea JClassLib安装说明', '<p>JClassLib安装过程</p>\n\n<p>Idea启动</p>\n\n<p>File -&gt;&nbsp;Plugins&nbsp;-&gt;&nbsp;搜索jclass -&gt; install jclass bytecode viewer</p>\n\n<p>重启后,选中Java文件,编译class</p>\n\n<p>选择View -&gt; show bytecode with jclasslib&nbsp;查看字节码数据</p>\n\n<p>&nbsp;</p>\n', '2020-07-08 00:00:00', 1);
INSERT INTO `article` VALUES (2573, '2-4 字节码组成-常量池', '<p><strong><span style=\"font-size:16px\"><span style=\"color:#000000\"><span style=\"color:#000000\">常量池</span></span></span></strong></p>\n\n<ul style=\"list-style-type:disc\">\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">constant_pool_count 常量计数器,从1开始</span></span></span></span></li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">常量池0位是预留位,</span></span></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">在特定情况下不引用任何常量池内容</span></span></span></span></li>\n	</ul>\n	</li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">常量不固定,所以需要计数器</span></span></span></span></li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">常量池的内容</span></span></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">字面量</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">字符串</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">final修饰数值</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">符号引用</span></span></span></span>\n		<ul style=\"list-style-type:disc\">\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">类和接口的全限定名</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">字段名称与描述符</span></span></span></span></li>\n			<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">方法名称与描述符</span></span></span></span></li>\n		</ul>\n		</li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">符号引用与直接引用</span></span></span></span></li>\n	</ul>\n	</li>\n	<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">常量池类型数据表</span></span></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">D-double</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">I-int</span></span></span></span></li>\n		<li><span style=\"font-size:10.5pt\"><span style=\"color:#000000\"><span style=\"font-size:10.5pt\"><span style=\"color:#000000\">L-引用对象</span></span></span></span></li>\n		<li>...</li>\n	</ul>\n	</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/88c61804ff07457bb59ff663842209ed.jpg\" style=\'max-width:100%\' /></p>\n', '2020-07-08 00:00:00', 1);
INSERT INTO `article` VALUES (2574, '2-5 字节码组成-类索引与访问标志', '<ul>\n	<li style=\"list-style-type:none\">&nbsp;</li>\n</ul>\n\n<h1 style=\"text-align:left\"><strong><span style=\"font-size:16px\"><span style=\"color:#000000\">类索引/父类索引与接口索引集合</span></span></strong></h1>\n\n<p style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">用于确定当前类的继承与实现关系</span></span></span></p>\n\n<ul style=\"list-style-type:square\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">当前类的全限定名</span></span></span>\n\n	<ul style=\"list-style-type:disc\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">全限定名就是完整类型(包名+类名)的意思</span></span></span></li>\n	</ul>\n	</li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">父类的全限定名</span></span></span></li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">接口的全限定名集合<img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/ac009e8eb4b1468eba1c3f7532f361a6.jpg\" style=\'max-width:100%\' /></span></span></span></li>\n</ul>\n\n<p style=\"text-align:left\"><strong><span style=\"font-size:16px\"><span style=\"color:#000000\">访问标志</span></span></strong></p>\n\n<ul style=\"list-style-type:square\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">访问接口分别隶属于</span></span></span>\n\n	<ul style=\"list-style-type:disc\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">类</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">字段</span></span></span>\n		<ul style=\"list-style-type:circle\">\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">又称成员变量/属性/类变量</span></span></span></li>\n		</ul>\n		</li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">方法</span></span></span></li>\n	</ul>\n	</li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">保存类/字段/方法的访问信息</span></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">是类还是接口</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">是否public</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">是否定义abstract</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">是否final修饰</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">表示是否由用户代码产生</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">...</span></span></span></li>\n	</ul>\n	</li>\n</ul>\n\n<p style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">​​​​​​​<img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/251b86ae8fc046e5951a746b7009a159.jpg\" style=\'max-width:100%\' />​​​​​​​</span></span></span></p>\n', '2020-07-08 00:00:00', 1);
INSERT INTO `article` VALUES (2575, '2-6 字节码组成-字段表、方法表与属性表', '<ul>\n	<li style=\"list-style-type:none\">&nbsp;</li>\n</ul>\n\n<h1 style=\"text-align:left\"><strong><span style=\"font-size:16px\"><span style=\"color:#000000\">字段表集合</span></span></strong></h1>\n\n<ul style=\"list-style-type:square\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">描述接口或者类中声明的变量</span></span></span>\n\n	<ul style=\"list-style-type:disc\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">类变量</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">实例变量</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">但不包含方法中的局部变量</span></span></span></li>\n	</ul>\n	</li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">组成</span></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">作用域</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">是否类/实例</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">可变性</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">并发可见性</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">字段数据类型</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">...</span></span></span></li>\n	</ul>\n	</li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">贴上字段图,介绍即可</span></span></span></li>\n</ul>\n\n<p style=\"text-align:left\"><strong><span style=\"font-size:16px\"><span style=\"color:#000000\">方法表集合</span></span></strong></p>\n\n<ul style=\"list-style-type:square\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">同字段表类似</span></span><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">,描述方法数据</span></span></span></li>\n</ul>\n\n<p style=\"text-align:left\"><span style=\"font-size:16px\"><strong><span style=\"color:#000000\">属性表</span></strong></span></p>\n\n<ul style=\"list-style-type:square\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">服务于Class文件/字段表/方法表</span></span></span></li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">提供辅助和更为详细的辅助信息</span></span></span></li>\n</ul>\n\n<p><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">不同主体的属性表不同</span></span></span></p>\n\n<p style=\"text-align:justify\">&nbsp;</p>\n\n<p style=\"text-align:justify\"><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/3b9af92542f948b1b8a1ebc206b98ff1.jpg\" style=\'max-width:100%\' /></p>\n\n<p style=\"text-align:justify\">&nbsp;</p>\n', '2020-07-08 00:00:00', 2);
INSERT INTO `article` VALUES (2576, '2-7 字节码指令简介', '<p><strong><span style=\"font-size:16px\">字节码指令</span></strong></p>\n\n<ul>\n	<li>字节码指令是包含在字节码的指令</li>\n	<li>字节码指令将源码编译时由编译器生成保存在Method描述中</li>\n	<li>字节码与平台无关,运行时JVM读取后翻译各平台底层指令</li>\n	<li>字节码指令总数不超过256个</li>\n</ul>\n\n<p><strong><span style=\"font-size:16px\">字节码指令格式</span></strong></p>\n\n<ul>\n	<li>字节码指令 [参数列表]&nbsp;\n	<ul>\n		<li><strong>invokevirtual </strong>#8 //cp_info#8 : java/lang/StringBuilder.append\n\n		<ul>\n			<li>执行StringBuilder对象的append方法</li>\n		</ul>\n		</li>\n		<li><strong>new </strong>#6 //cp_info#6 : &lt;java/lang/StringBuilder&gt;\n		<ul>\n			<li>实例化新的StringBuilder对象</li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n</ul>\n', '2020-07-08 00:00:00', 2);
INSERT INTO `article` VALUES (2577, '2-8 字节码指令分类概述', '<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/1005c4dbf1f54b00bf3ce1e12a0f614f.png\" style=\'max-width:100%\' /></p>\n\n<p>点击看大图</p>\n', '2020-07-08 00:00:00', 2);
INSERT INTO `article` VALUES (2578, '3-1 类加载执行过程', '<h1>类加载(Class Loader)子系统</h1>\n\n<ul>\n	<li>类加载子系统负责从文件或者网络加载Class字节流</li>\n	<li>类加载子系统会读取字节码中的信息,运行时存储到JVM内存</li>\n	<li>任何Class要被类加载子系统加载,都要符合JVM字节码规范</li>\n</ul>\n\n<h1>类加载子系统执行过程</h1>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/c68cdb7a5a224786bce7b2ba7a076535.jpg\" style=\'max-width:100%\' /></p>\n', '2020-07-08 00:00:00', 2);
INSERT INTO `article` VALUES (2579, '3-2 类加载过程-加载阶段', '<ul>\n	<li style=\"list-style-type:none\">\n	<ul>\n		<li style=\"list-style-type:none\">&nbsp;</li>\n	</ul>\n	</li>\n</ul>\n\n<p style=\"text-align:left\"><strong><span style=\"font-size:16px\"><span style=\"color:#000000\">加载阶段</span></span></strong></p>\n\n<ul style=\"list-style-type:disc\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">触发加载的方式</span></span></span>\n\n	<ul style=\"list-style-type:circle\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">遇到 new</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">反射</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">父类初始化</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">启动时,主类初始化</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">1.7动态语言支持</span></span></span></li>\n	</ul>\n	</li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">加载三件事</span></span></span>\n	<ul style=\"list-style-type:circle\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">获取二进制字节流</span></span></span>\n		<ul style=\"list-style-type:square\">\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">获取途径</span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">zip</span></span></span></li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">网络</span></span></span></li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">运行时计算生成</span></span></span></li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">其他文件/动态生成</span></span></span></li>\n			</ul>\n			</li>\n		</ul>\n		</li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">类的静态信息转化后存到内存</span></span></span>\n		<ul style=\"list-style-type:square\">\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">保存到方法区</span></span></span></li>\n		</ul>\n		</li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">生成Class对象</span></span></span>\n		<ul style=\"list-style-type:square\">\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">HotSpot虚拟机存储在方法区中</span></span></span></li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">所有父类都会被加载</span></span></span></li>\n	<li><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">触发初始化必然加载</span></span></span></li>\n</ul>\n\n<p><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\"><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/98f181c529ad4aa5bfd14fedd7efe6ef.png\" style=\'max-width:100%\' /></span></span></span></p>\n', '2020-07-08 00:00:00', 2);
INSERT INTO `article` VALUES (2580, '3-3 类加载过程-链接Linking阶段', '<h1>链接阶段Linking</h1>\n\n<h2>链接阶段包含三个子步骤:</h2>\n\n<ol>\n	<li>\n	<h2>验证Verify:确保字节码符合虚拟机要求</h2>\n	</li>\n	<li>\n	<h2>准备Prepare: 为字段赋予初始值</h2>\n	</li>\n	<li>\n	<h2>解析Resolve: 符号引用转换为直接引用</h2>\n	</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<ul>\n	<li style=\"list-style-type:none\">\n	<ul>\n		<li style=\"list-style-type:none\">&nbsp;</li>\n	</ul>\n	</li>\n</ul>\n\n<p style=\"text-align:left\"><span style=\"font-size:16px\"><strong><span style=\"color:#000000\">验证</span></strong></span></p>\n\n<ul style=\"list-style-type:disc\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">确保符合虚拟机要求</span></span></span>\n\n	<ul style=\"list-style-type:circle\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">因为可以是任何途径生成,所以必须校验</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">从JAVA7后,校验规范订版</span></span></span>\n		<ul style=\"list-style-type:square\">\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">文件格式校验</span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">CAFEBABE</span></span></span></li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">版本号是否匹配</span></span></span></li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">...</span></span></span></li>\n			</ul>\n			</li>\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">元数据匹配,语义分析</span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">是否有父类</span></span></span></li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">是否继承了final修饰的类</span></span></span></li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">...</span></span></span></li>\n			</ul>\n			</li>\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">字节码验证,数据流与控制流分析</span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">类型转换是否有效</span></span></span></li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">无法执行到return?</span></span></span></li>\n			</ul>\n			</li>\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">符号引用</span></span></span>\n			<ul style=\"list-style-type:disc\">\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">通过全限定名是否能找到对应的类</span></span></span>\n				<ul style=\"list-style-type:circle\">\n					<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">ClassNotFoundException</span></span></span></li>\n				</ul>\n				</li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">通过全限定名能否找到对应的方法</span></span></span>\n				<ul style=\"list-style-type:circle\">\n					<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">NoSuchMethodError</span></span></span></li>\n				</ul>\n				</li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">注意,这里只是检查,目标Class对象不一定已被加载到内存中,符号引用是由字节码规定</span></span></span></li>\n			</ul>\n			</li>\n		</ul>\n		</li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">验证后进入方法区,之后不再操作字节流,加载与验证时交替进行的</span></span></span></li>\n	</ul>\n	</li>\n</ul>\n\n<p style=\"text-align:left\"><strong><span style=\"font-size:16px\"><span style=\"color:#000000\">准备</span></span></strong></p>\n\n<ul style=\"list-style-type:disc\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">为类变量赋予初始值</span></span></span>\n\n	<ul style=\"list-style-type:circle\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">初始值有表</span></span></span>\n\n		<ul style=\"list-style-type:square\">\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">对于final修饰的常量保存到字节码中写死啦</span></span></span></li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n</ul>\n\n<p style=\"text-align:left\"><strong><span style=\"font-size:16px\"><span style=\"color:#000000\">解析</span></span></strong></p>\n\n<ul style=\"list-style-type:disc\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">同一个符号与内存中的地址建立指针关联,解析是建立在符号引用后进行的</span></span></span>\n\n	<ul style=\"list-style-type:circle\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">类解析</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">字段解析</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">方法解析</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">接口方法解析</span></span></span></li>\n	</ul>\n	</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/e5d9cbd473d24ea8802fcf2616c55f7c.png\" style=\'max-width:100%\' /></p>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/d901eeb836a14bdcbc7fa280e0cf5910.png\" style=\'max-width:100%\' /></p>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/9ed09d730cc442a7b144469526c37280.png\" style=\'max-width:100%\' /></p>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/de91743a5f354900a54a6d7d61d099e8.png\" style=\'max-width:100%\' /></p>\n', '2020-07-08 00:00:00', 2);
INSERT INTO `article` VALUES (2581, '3-4 类加载过程-初始化Initialization', '<ul>\n	<li style=\"list-style-type:none\">\n	<ul>\n		<li style=\"list-style-type:none\">&nbsp;</li>\n	</ul>\n	</li>\n</ul>\n\n<p style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">初始化</span></span></span></p>\n\n<ul style=\"list-style-type:disc\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">-XX:+TraceClassLoading观察子类加载过程</span></span></span></li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">前面四步都是虚拟机主导,初始化则与代码相关</span></span></span></li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">初始化阶段是执行类构造器&lt;clinit&gt;的过程</span></span></span>\n	<ul style=\"list-style-type:circle\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">收集类变量static{}赋值动作</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">父类的clinit必须要优先于子clint执行</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">没有类变量与static{}块就没有clinit</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">clint会加锁,避免多线程同时操作</span></span></span></li>\n	</ul>\n	</li>\n</ul>\n\n<p style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\"><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/ed0fc1fee3784747b9b8b1e30bf698a8.png\" style=\'max-width:100%\' /></span></span></span></p>\n\n<p style=\"text-align:left\">&nbsp;</p>\n\n<p style=\"text-align:left\">&nbsp;</p>\n', '2020-07-08 00:00:00', 2);
INSERT INTO `article` VALUES (2582, '3-5 类加载器介绍', '<h1><span id=\"cke_bm_3717C\" style=\"display:none\">&nbsp;</span>&nbsp;</h1>\n\n<ul>\n</ul>\n\n<h1>类加载器</h1>\n\n<ul style=\"list-style-type:square\">\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">类加载器对应&quot;加载&quot;,是在JVM之外完成的</span></span></span></li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">从JVM角度区分</span></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">启动类加载器</span></span></span></li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">其他类加载器</span></span></span></li>\n	</ul>\n	</li>\n	<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">从开发人员角度</span></span></span>\n	<ul style=\"list-style-type:disc\">\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">启动类加载器</span></span></span>\n		<ul style=\"list-style-type:circle\">\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">存放在JAVA_HOME\\lib</span></span></span></li>\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">-XBootclasspath指定路径,且名称固定</span></span></span></li>\n		</ul>\n		</li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">扩展类加载器</span></span></span>\n		<ul style=\"list-style-type:circle\">\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">JAVAHOME\\lib\\ext</span></span></span></li>\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">java.ext.dirs系统变量所指定的路径类库</span></span></span></li>\n		</ul>\n		</li>\n		<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">应用程序加载器,也叫系统类加载器</span></span></span>\n		<ul style=\"list-style-type:circle\">\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">加载ClassPath上的类库</span></span></span></li>\n			<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">可以自己写一个类加载器</span></span></span>\n			<ul style=\"list-style-type:square\">\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">要演示到不同加载器命名空间的Class对象是不同的</span></span></span></li>\n				<li style=\"text-align:left\"><span style=\"font-size:12pt\"><span style=\"font-size:10.5000pt\"><span style=\"color:#000000\">类加载器拥有多种不同的加载器,拥有独立的类命名空间,同样的Class文件,被不同加载器加载,拥有不同的类对象</span></span></span></li>\n			</ul>\n			</li>\n		</ul>\n		</li>\n	</ul>\n	</li>\n</ul>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/572bf84515c54f518d99a08d9333af08.png\" style=\'max-width:100%\' /></p>\n\n<p><img alt=\"\" src=\"https://manongbiji.oss-cn-beijing.aliyuncs.com/attachment/20200708/da7b76643a6543cf9523804f6496de5e.png\" style=\'max-width:100%\' /></p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n', '2020-07-08 00:00:00', 2);
INSERT INTO `article` VALUES (2583, '3-6 自定义类加载器', '<h1>在某些特殊情况下,需要自定义类加载器:</h1>\n\n<h2>自定义已加载器场景:</h2>\n\n<ul>\n	<li>\n	<h3>字节码二进制流来自网络</h3>\n	</li>\n	<li>\n	<h3>字节码文件不在指定的lib/ext/classpath路径下</h3>\n	</li>\n	<li>\n	<h3>需要对二进制流加工后才能得到字节码</h3>\n	</li>\n</ul>\n\n<h1>面试题:Class实例在JVM是唯一的吗?</h1>\n\n<ul>\n	<li>\n	<h2>类加载器拥有多种不同的加载器,拥有独立的类命名空间,同样的Class文件,被不同加载器加载,拥有不同的类对象</h2>\n	</li>\n</ul>\n\n<hr />\n<pre>\n<code class=\"language-java\">package com.itlaoqi.classloader.custom;\n\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.FileInputStream;\n\n/**\n * 自定义ClassLoader三要素:\n * 1. 继承自ClassLoader,重写findClass()\n * 2. 获取字节码二进制流\n * 3. defineClass加载生成Class实例\n */\npublic class MyClassLoader1 extends ClassLoader {\n    private final String CLASS_PATH = \"c://ClassSample\";\n\n    protected Class&lt;?&gt; findClass(String name) {\n        try {\n            //获取字节码二进制流\n            FileInputStream in = new FileInputStream(this.CLASS_PATH);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            byte[] buf = new byte[1024];\n            int len = -1;\n            while ((len = in.read(buf)) != -1) {\n                baos.write(buf, 0, len);\n            }\n            in.close();\n            byte[] classBytes = baos.toByteArray();\n            //加载Class字节码\n            return defineClass(classBytes, 0, classBytes.length);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}</code></pre>\n\n<hr />\n<p>&nbsp;</p>\n\n<pre>\n<code class=\"language-java\">package com.itlaoqi.classloader.custom;\n\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.FileInputStream;\n\n\n/**\n * 自定义ClassLoader三要素:\n * 1. 继承自ClassLoader,重写findClass()\n * 2. 获取字节码二进制流\n * 3. defineClass加载生成Class实例\n */\npublic class MyClassLoader2 extends ClassLoader {\n    private final String CLASS_PATH = \"d://ClassSample\" ;\n    protected Class&lt;?&gt; findClass(String name) {\n        try {\n            FileInputStream in = new FileInputStream(this.CLASS_PATH) ;\n            ByteArrayOutputStream baos = new ByteArrayOutputStream() ;\n            byte[] buf = new byte[1024] ;\n            int len = -1 ;\n            while((len = in.read(buf)) != -1){\n                baos.write(buf , 0 , len);\n            }\n            in.close();\n            byte[] classBytes = baos.toByteArray();\n            return defineClass( classBytes , 0 , classBytes.length) ;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null ;\n    }\n}</code></pre>\n\n<hr />\n<p>&nbsp;</p>\n\n<pre>\n<code class=\"language-java\">package com.itlaoqi.classloader.custom;\n\npublic class Application {\n\n\n    public static void main(String[] args) throws ClassNotFoundException {\n        ClassLoader c1 = new MyClassLoader1() ;\n        //利用自定义加载器1加载对象\\\n        //调用ClassLoader.loadClass()加载字节码会自动调用findClass方法\n        Class&lt;?&gt; clz1 = c1.loadClass(\"ClassSample\");\n        System.out.println(clz1.getClassLoader() + \"|hashcode:\" + clz1.hashCode());\n\n        ClassLoader c2 = new MyClassLoader2() ;\n        //利用自定义加载器1加载对象\n        Class&lt;?&gt; clz2 = c2.loadClass(\"ClassSample\");\n        System.out.println(clz2.getClassLoader() + \"|hashcode:\" + clz2.hashCode());\n\n        System.out.println(\"结论:同一个Class被不同的类加载器加载后在JVM中产生的类对象是不同的\");\n        System.out.println(\"推导:在同一个类加载器作用范围内Class实例加载时才会保持唯一性\");\n\n    }\n}\n</code></pre>\n\n<hr />\n<p>&nbsp;</p>\n', '2020-07-08 00:00:00', 2);

SET FOREIGN_KEY_CHECKS = 1;
